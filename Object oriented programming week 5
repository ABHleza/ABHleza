Assignment 1: Design Your Own Class!
Let's create a class representing a Smartphone:
Python
class Smartphone:
    def __init__(self, brand, model, storage, color):
        self.brand = brand
        self.model = model
        self.storage = storage
        self.color = color
        self.battery_life = 100

    def charge_battery(self):
        self.battery_life = 100
        print(f"{self.brand} {self.model}'s battery is now fully charged.")

    def make_call(self):
        if self.battery_life > 0:
            print(f"Making a call from {self.brand} {self.model}...")
            self.battery_life -= 5
        else:
            print(f"{self.brand} {self.model}'s battery is dead. Please charge it.")

    def display_info(self):
        print(f"Brand: {self.brand}")
        print(f"Model: {self.model}")
        print(f"Storage: {self.storage} GB")
        print(f"Color: {self.color}")
        print(f"Battery Life: {self.battery_life}%")
Inheritance Layer: Adding a Flagship Smartphone Class
Let's create a FlagshipSmartphone class that inherits from the Smartphone class:
Python
class FlagshipSmartphone(Smartphone):
    def __init__(self, brand, model, storage, color, camera_resolution):
        super().__init__(brand, model, storage, color)
        self.camera_resolution = camera_resolution

    def display_info(self):
        super().display_info()
        print(f"Camera Resolution: {self.camera_resolution} MP")

    def take_photo(self):
        if self.battery_life > 0:
            print(f"Taking a photo with {self.brand} {self.model}'s {self.camera_resolution} MP camera...")
            self.battery_life -= 2
        else:
            print(f"{self.brand} {self.model}'s battery is dead. Please charge it.")

Activity 2: Polymorphism Challenge!
Let's create a program that includes different types of vehicles with a move() method:
Python
class Vehicle:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    def move(self):
        pass


class Car(Vehicle):
    def move(self):
        print(f"The {self.brand} {self.model} is driving.")


class Plane(Vehicle):
    def move(self):
        print(f"The {self.brand} {self.model} is flying.")


class Boat(Vehicle):
    def move(self):
        print(f"The {self.brand} {self.model} is sailing.")


# Create objects
car = Car("Toyota", "Camry")
plane = Plane("Boeing", "747")
boat = Boat("Azimut", "80 Flybridge")


# Call move() method
car.move()
plane.move()
boat.move()
Output:
The Toyota Camry is driving.
The Boeing 747 is flying.
The Azimut 80 Flybridge is sailing.
